syntax = "proto3";
package sonrhq.service.v1;

option go_package = "github.com/sonrhq/service";

import "cosmos/base/query/v1beta1/pagination.proto";
import "sonrhq/service/v1/types.proto";
import "google/api/annotations.proto";
import "cosmos/query/v1/query.proto";
import "amino/amino.proto";
import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "sonrhq/service/module/v1/state.proto";

// Msg defines the module Msg service.
service Query {
  // Counter returns the current counter value.
  rpc Counter(QueryCounterRequest) returns (QueryCounterResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get =
        "/sonrhq/service/v1/counter/{address}";
  }

  // ServiceRecord returns the service record for the given domain origin.
  rpc ServiceRecord(QueryServiceRecordRequest) returns (QueryServiceRecordResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get =
        "/sonrhq/service/v1/record/{origin}";
  }

  // Counters returns all the counter values.
  rpc Counters(QueryCountersRequest) returns (QueryCountersResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/sonrhq/service/v1/counters";
  }

  // Params returns the module parameters.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/sonrhq/service/v1/params";
  }
}

// QueryServiceRecordRequest is the request type for the Query/ServiceRecord RPC
// method.
message QueryServiceRecordRequest {
  // origin defines the origin of the service record.
  string origin = 1;
}

// QueryServiceRecordResponse is the response type for the Query/ServiceRecord RPC
// method.
message QueryServiceRecordResponse {
  // service_record defines the service record for the given origin.
  sonrhq.service.module.v1.ServiceRecord service_record = 1;
}

// QueryCounterRequest is the request type for the Query/Counter RPC
// method.
message QueryCounterRequest {
  // address defines the address to query for the counter.
  string address = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}

// QueryCounterResponse is the response type for the Query/Counter RPC
// method.
message QueryCounterResponse {
  // counter defines the current counter for the sender.
  uint64 counter = 1;
}

// QueryCountersResponse is the request type for the Query/Counters RPC
message QueryCountersRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryCountersResponse is the response type for the Query/Counters RPC
// method.
message QueryCountersResponse {
  // counters defines all the counters in the store.
  repeated Counter counters = 1;

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is the response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params defines the parameters of the module.
  Params params = 1
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}
