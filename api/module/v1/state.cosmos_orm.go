// Code generated by protoc-gen-go-cosmos-orm. DO NOT EDIT.

package modulev1

import (
	context "context"
	ormlist "cosmossdk.io/orm/model/ormlist"
	ormtable "cosmossdk.io/orm/model/ormtable"
	ormerrors "cosmossdk.io/orm/types/ormerrors"
)

type ServiceRecordTable interface {
	Insert(ctx context.Context, serviceRecord *ServiceRecord) error
	Update(ctx context.Context, serviceRecord *ServiceRecord) error
	Save(ctx context.Context, serviceRecord *ServiceRecord) error
	Delete(ctx context.Context, serviceRecord *ServiceRecord) error
	Has(ctx context.Context, did string, origin string) (found bool, err error)
	// Get returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	Get(ctx context.Context, did string, origin string) (*ServiceRecord, error)
	HasByOrigin(ctx context.Context, origin string) (found bool, err error)
	// GetByOrigin returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	GetByOrigin(ctx context.Context, origin string) (*ServiceRecord, error)
	HasByNameOwner(ctx context.Context, name string, owner string) (found bool, err error)
	// GetByNameOwner returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	GetByNameOwner(ctx context.Context, name string, owner string) (*ServiceRecord, error)
	HasByOriginOwner(ctx context.Context, origin string, owner string) (found bool, err error)
	// GetByOriginOwner returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	GetByOriginOwner(ctx context.Context, origin string, owner string) (*ServiceRecord, error)
	List(ctx context.Context, prefixKey ServiceRecordIndexKey, opts ...ormlist.Option) (ServiceRecordIterator, error)
	ListRange(ctx context.Context, from, to ServiceRecordIndexKey, opts ...ormlist.Option) (ServiceRecordIterator, error)
	DeleteBy(ctx context.Context, prefixKey ServiceRecordIndexKey) error
	DeleteRange(ctx context.Context, from, to ServiceRecordIndexKey) error

	doNotImplement()
}

type ServiceRecordIterator struct {
	ormtable.Iterator
}

func (i ServiceRecordIterator) Value() (*ServiceRecord, error) {
	var serviceRecord ServiceRecord
	err := i.UnmarshalMessage(&serviceRecord)
	return &serviceRecord, err
}

type ServiceRecordIndexKey interface {
	id() uint32
	values() []interface{}
	serviceRecordIndexKey()
}

// primary key starting index..
type ServiceRecordPrimaryKey = ServiceRecordDidOriginIndexKey

type ServiceRecordDidOriginIndexKey struct {
	vs []interface{}
}

func (x ServiceRecordDidOriginIndexKey) id() uint32             { return 0 }
func (x ServiceRecordDidOriginIndexKey) values() []interface{}  { return x.vs }
func (x ServiceRecordDidOriginIndexKey) serviceRecordIndexKey() {}

func (this ServiceRecordDidOriginIndexKey) WithDid(did string) ServiceRecordDidOriginIndexKey {
	this.vs = []interface{}{did}
	return this
}

func (this ServiceRecordDidOriginIndexKey) WithDidOrigin(did string, origin string) ServiceRecordDidOriginIndexKey {
	this.vs = []interface{}{did, origin}
	return this
}

type ServiceRecordOriginIndexKey struct {
	vs []interface{}
}

func (x ServiceRecordOriginIndexKey) id() uint32             { return 1 }
func (x ServiceRecordOriginIndexKey) values() []interface{}  { return x.vs }
func (x ServiceRecordOriginIndexKey) serviceRecordIndexKey() {}

func (this ServiceRecordOriginIndexKey) WithOrigin(origin string) ServiceRecordOriginIndexKey {
	this.vs = []interface{}{origin}
	return this
}

type ServiceRecordOwnerIndexKey struct {
	vs []interface{}
}

func (x ServiceRecordOwnerIndexKey) id() uint32             { return 2 }
func (x ServiceRecordOwnerIndexKey) values() []interface{}  { return x.vs }
func (x ServiceRecordOwnerIndexKey) serviceRecordIndexKey() {}

func (this ServiceRecordOwnerIndexKey) WithOwner(owner string) ServiceRecordOwnerIndexKey {
	this.vs = []interface{}{owner}
	return this
}

type ServiceRecordNameOwnerIndexKey struct {
	vs []interface{}
}

func (x ServiceRecordNameOwnerIndexKey) id() uint32             { return 3 }
func (x ServiceRecordNameOwnerIndexKey) values() []interface{}  { return x.vs }
func (x ServiceRecordNameOwnerIndexKey) serviceRecordIndexKey() {}

func (this ServiceRecordNameOwnerIndexKey) WithName(name string) ServiceRecordNameOwnerIndexKey {
	this.vs = []interface{}{name}
	return this
}

func (this ServiceRecordNameOwnerIndexKey) WithNameOwner(name string, owner string) ServiceRecordNameOwnerIndexKey {
	this.vs = []interface{}{name, owner}
	return this
}

type ServiceRecordOriginOwnerIndexKey struct {
	vs []interface{}
}

func (x ServiceRecordOriginOwnerIndexKey) id() uint32             { return 4 }
func (x ServiceRecordOriginOwnerIndexKey) values() []interface{}  { return x.vs }
func (x ServiceRecordOriginOwnerIndexKey) serviceRecordIndexKey() {}

func (this ServiceRecordOriginOwnerIndexKey) WithOrigin(origin string) ServiceRecordOriginOwnerIndexKey {
	this.vs = []interface{}{origin}
	return this
}

func (this ServiceRecordOriginOwnerIndexKey) WithOriginOwner(origin string, owner string) ServiceRecordOriginOwnerIndexKey {
	this.vs = []interface{}{origin, owner}
	return this
}

type serviceRecordTable struct {
	table ormtable.Table
}

func (this serviceRecordTable) Insert(ctx context.Context, serviceRecord *ServiceRecord) error {
	return this.table.Insert(ctx, serviceRecord)
}

func (this serviceRecordTable) Update(ctx context.Context, serviceRecord *ServiceRecord) error {
	return this.table.Update(ctx, serviceRecord)
}

func (this serviceRecordTable) Save(ctx context.Context, serviceRecord *ServiceRecord) error {
	return this.table.Save(ctx, serviceRecord)
}

func (this serviceRecordTable) Delete(ctx context.Context, serviceRecord *ServiceRecord) error {
	return this.table.Delete(ctx, serviceRecord)
}

func (this serviceRecordTable) Has(ctx context.Context, did string, origin string) (found bool, err error) {
	return this.table.PrimaryKey().Has(ctx, did, origin)
}

func (this serviceRecordTable) Get(ctx context.Context, did string, origin string) (*ServiceRecord, error) {
	var serviceRecord ServiceRecord
	found, err := this.table.PrimaryKey().Get(ctx, &serviceRecord, did, origin)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &serviceRecord, nil
}

func (this serviceRecordTable) HasByOrigin(ctx context.Context, origin string) (found bool, err error) {
	return this.table.GetIndexByID(1).(ormtable.UniqueIndex).Has(ctx,
		origin,
	)
}

func (this serviceRecordTable) GetByOrigin(ctx context.Context, origin string) (*ServiceRecord, error) {
	var serviceRecord ServiceRecord
	found, err := this.table.GetIndexByID(1).(ormtable.UniqueIndex).Get(ctx, &serviceRecord,
		origin,
	)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &serviceRecord, nil
}

func (this serviceRecordTable) HasByNameOwner(ctx context.Context, name string, owner string) (found bool, err error) {
	return this.table.GetIndexByID(3).(ormtable.UniqueIndex).Has(ctx,
		name,
		owner,
	)
}

func (this serviceRecordTable) GetByNameOwner(ctx context.Context, name string, owner string) (*ServiceRecord, error) {
	var serviceRecord ServiceRecord
	found, err := this.table.GetIndexByID(3).(ormtable.UniqueIndex).Get(ctx, &serviceRecord,
		name,
		owner,
	)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &serviceRecord, nil
}

func (this serviceRecordTable) HasByOriginOwner(ctx context.Context, origin string, owner string) (found bool, err error) {
	return this.table.GetIndexByID(4).(ormtable.UniqueIndex).Has(ctx,
		origin,
		owner,
	)
}

func (this serviceRecordTable) GetByOriginOwner(ctx context.Context, origin string, owner string) (*ServiceRecord, error) {
	var serviceRecord ServiceRecord
	found, err := this.table.GetIndexByID(4).(ormtable.UniqueIndex).Get(ctx, &serviceRecord,
		origin,
		owner,
	)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &serviceRecord, nil
}

func (this serviceRecordTable) List(ctx context.Context, prefixKey ServiceRecordIndexKey, opts ...ormlist.Option) (ServiceRecordIterator, error) {
	it, err := this.table.GetIndexByID(prefixKey.id()).List(ctx, prefixKey.values(), opts...)
	return ServiceRecordIterator{it}, err
}

func (this serviceRecordTable) ListRange(ctx context.Context, from, to ServiceRecordIndexKey, opts ...ormlist.Option) (ServiceRecordIterator, error) {
	it, err := this.table.GetIndexByID(from.id()).ListRange(ctx, from.values(), to.values(), opts...)
	return ServiceRecordIterator{it}, err
}

func (this serviceRecordTable) DeleteBy(ctx context.Context, prefixKey ServiceRecordIndexKey) error {
	return this.table.GetIndexByID(prefixKey.id()).DeleteBy(ctx, prefixKey.values()...)
}

func (this serviceRecordTable) DeleteRange(ctx context.Context, from, to ServiceRecordIndexKey) error {
	return this.table.GetIndexByID(from.id()).DeleteRange(ctx, from.values(), to.values())
}

func (this serviceRecordTable) doNotImplement() {}

var _ ServiceRecordTable = serviceRecordTable{}

func NewServiceRecordTable(db ormtable.Schema) (ServiceRecordTable, error) {
	table := db.GetTable(&ServiceRecord{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&ServiceRecord{}).ProtoReflect().Descriptor().FullName()))
	}
	return serviceRecordTable{table}, nil
}

type UserProfileTable interface {
	Insert(ctx context.Context, userProfile *UserProfile) error
	Update(ctx context.Context, userProfile *UserProfile) error
	Save(ctx context.Context, userProfile *UserProfile) error
	Delete(ctx context.Context, userProfile *UserProfile) error
	Has(ctx context.Context, did string, origin string, handle string) (found bool, err error)
	// Get returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	Get(ctx context.Context, did string, origin string, handle string) (*UserProfile, error)
	HasByOriginHandle(ctx context.Context, origin string, handle string) (found bool, err error)
	// GetByOriginHandle returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	GetByOriginHandle(ctx context.Context, origin string, handle string) (*UserProfile, error)
	List(ctx context.Context, prefixKey UserProfileIndexKey, opts ...ormlist.Option) (UserProfileIterator, error)
	ListRange(ctx context.Context, from, to UserProfileIndexKey, opts ...ormlist.Option) (UserProfileIterator, error)
	DeleteBy(ctx context.Context, prefixKey UserProfileIndexKey) error
	DeleteRange(ctx context.Context, from, to UserProfileIndexKey) error

	doNotImplement()
}

type UserProfileIterator struct {
	ormtable.Iterator
}

func (i UserProfileIterator) Value() (*UserProfile, error) {
	var userProfile UserProfile
	err := i.UnmarshalMessage(&userProfile)
	return &userProfile, err
}

type UserProfileIndexKey interface {
	id() uint32
	values() []interface{}
	userProfileIndexKey()
}

// primary key starting index..
type UserProfilePrimaryKey = UserProfileDidOriginHandleIndexKey

type UserProfileDidOriginHandleIndexKey struct {
	vs []interface{}
}

func (x UserProfileDidOriginHandleIndexKey) id() uint32            { return 0 }
func (x UserProfileDidOriginHandleIndexKey) values() []interface{} { return x.vs }
func (x UserProfileDidOriginHandleIndexKey) userProfileIndexKey()  {}

func (this UserProfileDidOriginHandleIndexKey) WithDid(did string) UserProfileDidOriginHandleIndexKey {
	this.vs = []interface{}{did}
	return this
}

func (this UserProfileDidOriginHandleIndexKey) WithDidOrigin(did string, origin string) UserProfileDidOriginHandleIndexKey {
	this.vs = []interface{}{did, origin}
	return this
}

func (this UserProfileDidOriginHandleIndexKey) WithDidOriginHandle(did string, origin string, handle string) UserProfileDidOriginHandleIndexKey {
	this.vs = []interface{}{did, origin, handle}
	return this
}

type UserProfileOriginIndexKey struct {
	vs []interface{}
}

func (x UserProfileOriginIndexKey) id() uint32            { return 1 }
func (x UserProfileOriginIndexKey) values() []interface{} { return x.vs }
func (x UserProfileOriginIndexKey) userProfileIndexKey()  {}

func (this UserProfileOriginIndexKey) WithOrigin(origin string) UserProfileOriginIndexKey {
	this.vs = []interface{}{origin}
	return this
}

type UserProfileOriginHandleIndexKey struct {
	vs []interface{}
}

func (x UserProfileOriginHandleIndexKey) id() uint32            { return 2 }
func (x UserProfileOriginHandleIndexKey) values() []interface{} { return x.vs }
func (x UserProfileOriginHandleIndexKey) userProfileIndexKey()  {}

func (this UserProfileOriginHandleIndexKey) WithOrigin(origin string) UserProfileOriginHandleIndexKey {
	this.vs = []interface{}{origin}
	return this
}

func (this UserProfileOriginHandleIndexKey) WithOriginHandle(origin string, handle string) UserProfileOriginHandleIndexKey {
	this.vs = []interface{}{origin, handle}
	return this
}

type userProfileTable struct {
	table ormtable.Table
}

func (this userProfileTable) Insert(ctx context.Context, userProfile *UserProfile) error {
	return this.table.Insert(ctx, userProfile)
}

func (this userProfileTable) Update(ctx context.Context, userProfile *UserProfile) error {
	return this.table.Update(ctx, userProfile)
}

func (this userProfileTable) Save(ctx context.Context, userProfile *UserProfile) error {
	return this.table.Save(ctx, userProfile)
}

func (this userProfileTable) Delete(ctx context.Context, userProfile *UserProfile) error {
	return this.table.Delete(ctx, userProfile)
}

func (this userProfileTable) Has(ctx context.Context, did string, origin string, handle string) (found bool, err error) {
	return this.table.PrimaryKey().Has(ctx, did, origin, handle)
}

func (this userProfileTable) Get(ctx context.Context, did string, origin string, handle string) (*UserProfile, error) {
	var userProfile UserProfile
	found, err := this.table.PrimaryKey().Get(ctx, &userProfile, did, origin, handle)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &userProfile, nil
}

func (this userProfileTable) HasByOriginHandle(ctx context.Context, origin string, handle string) (found bool, err error) {
	return this.table.GetIndexByID(2).(ormtable.UniqueIndex).Has(ctx,
		origin,
		handle,
	)
}

func (this userProfileTable) GetByOriginHandle(ctx context.Context, origin string, handle string) (*UserProfile, error) {
	var userProfile UserProfile
	found, err := this.table.GetIndexByID(2).(ormtable.UniqueIndex).Get(ctx, &userProfile,
		origin,
		handle,
	)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &userProfile, nil
}

func (this userProfileTable) List(ctx context.Context, prefixKey UserProfileIndexKey, opts ...ormlist.Option) (UserProfileIterator, error) {
	it, err := this.table.GetIndexByID(prefixKey.id()).List(ctx, prefixKey.values(), opts...)
	return UserProfileIterator{it}, err
}

func (this userProfileTable) ListRange(ctx context.Context, from, to UserProfileIndexKey, opts ...ormlist.Option) (UserProfileIterator, error) {
	it, err := this.table.GetIndexByID(from.id()).ListRange(ctx, from.values(), to.values(), opts...)
	return UserProfileIterator{it}, err
}

func (this userProfileTable) DeleteBy(ctx context.Context, prefixKey UserProfileIndexKey) error {
	return this.table.GetIndexByID(prefixKey.id()).DeleteBy(ctx, prefixKey.values()...)
}

func (this userProfileTable) DeleteRange(ctx context.Context, from, to UserProfileIndexKey) error {
	return this.table.GetIndexByID(from.id()).DeleteRange(ctx, from.values(), to.values())
}

func (this userProfileTable) doNotImplement() {}

var _ UserProfileTable = userProfileTable{}

func NewUserProfileTable(db ormtable.Schema) (UserProfileTable, error) {
	table := db.GetTable(&UserProfile{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&UserProfile{}).ProtoReflect().Descriptor().FullName()))
	}
	return userProfileTable{table}, nil
}

type ResourceTable interface {
	Insert(ctx context.Context, resource *Resource) error
	Update(ctx context.Context, resource *Resource) error
	Save(ctx context.Context, resource *Resource) error
	Delete(ctx context.Context, resource *Resource) error
	Has(ctx context.Context, did string, cid string) (found bool, err error)
	// Get returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	Get(ctx context.Context, did string, cid string) (*Resource, error)
	HasByCid(ctx context.Context, cid string) (found bool, err error)
	// GetByCid returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	GetByCid(ctx context.Context, cid string) (*Resource, error)
	HasByOriginCid(ctx context.Context, origin string, cid string) (found bool, err error)
	// GetByOriginCid returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	GetByOriginCid(ctx context.Context, origin string, cid string) (*Resource, error)
	HasByOwnerCid(ctx context.Context, owner string, cid string) (found bool, err error)
	// GetByOwnerCid returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	GetByOwnerCid(ctx context.Context, owner string, cid string) (*Resource, error)
	HasByOwnerOriginCid(ctx context.Context, owner string, origin string, cid string) (found bool, err error)
	// GetByOwnerOriginCid returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	GetByOwnerOriginCid(ctx context.Context, owner string, origin string, cid string) (*Resource, error)
	List(ctx context.Context, prefixKey ResourceIndexKey, opts ...ormlist.Option) (ResourceIterator, error)
	ListRange(ctx context.Context, from, to ResourceIndexKey, opts ...ormlist.Option) (ResourceIterator, error)
	DeleteBy(ctx context.Context, prefixKey ResourceIndexKey) error
	DeleteRange(ctx context.Context, from, to ResourceIndexKey) error

	doNotImplement()
}

type ResourceIterator struct {
	ormtable.Iterator
}

func (i ResourceIterator) Value() (*Resource, error) {
	var resource Resource
	err := i.UnmarshalMessage(&resource)
	return &resource, err
}

type ResourceIndexKey interface {
	id() uint32
	values() []interface{}
	resourceIndexKey()
}

// primary key starting index..
type ResourcePrimaryKey = ResourceDidCidIndexKey

type ResourceDidCidIndexKey struct {
	vs []interface{}
}

func (x ResourceDidCidIndexKey) id() uint32            { return 0 }
func (x ResourceDidCidIndexKey) values() []interface{} { return x.vs }
func (x ResourceDidCidIndexKey) resourceIndexKey()     {}

func (this ResourceDidCidIndexKey) WithDid(did string) ResourceDidCidIndexKey {
	this.vs = []interface{}{did}
	return this
}

func (this ResourceDidCidIndexKey) WithDidCid(did string, cid string) ResourceDidCidIndexKey {
	this.vs = []interface{}{did, cid}
	return this
}

type ResourceCidIndexKey struct {
	vs []interface{}
}

func (x ResourceCidIndexKey) id() uint32            { return 1 }
func (x ResourceCidIndexKey) values() []interface{} { return x.vs }
func (x ResourceCidIndexKey) resourceIndexKey()     {}

func (this ResourceCidIndexKey) WithCid(cid string) ResourceCidIndexKey {
	this.vs = []interface{}{cid}
	return this
}

type ResourceOriginIndexKey struct {
	vs []interface{}
}

func (x ResourceOriginIndexKey) id() uint32            { return 2 }
func (x ResourceOriginIndexKey) values() []interface{} { return x.vs }
func (x ResourceOriginIndexKey) resourceIndexKey()     {}

func (this ResourceOriginIndexKey) WithOrigin(origin string) ResourceOriginIndexKey {
	this.vs = []interface{}{origin}
	return this
}

type ResourceOriginCidIndexKey struct {
	vs []interface{}
}

func (x ResourceOriginCidIndexKey) id() uint32            { return 3 }
func (x ResourceOriginCidIndexKey) values() []interface{} { return x.vs }
func (x ResourceOriginCidIndexKey) resourceIndexKey()     {}

func (this ResourceOriginCidIndexKey) WithOrigin(origin string) ResourceOriginCidIndexKey {
	this.vs = []interface{}{origin}
	return this
}

func (this ResourceOriginCidIndexKey) WithOriginCid(origin string, cid string) ResourceOriginCidIndexKey {
	this.vs = []interface{}{origin, cid}
	return this
}

type ResourceOwnerIndexKey struct {
	vs []interface{}
}

func (x ResourceOwnerIndexKey) id() uint32            { return 4 }
func (x ResourceOwnerIndexKey) values() []interface{} { return x.vs }
func (x ResourceOwnerIndexKey) resourceIndexKey()     {}

func (this ResourceOwnerIndexKey) WithOwner(owner string) ResourceOwnerIndexKey {
	this.vs = []interface{}{owner}
	return this
}

type ResourceOwnerCidIndexKey struct {
	vs []interface{}
}

func (x ResourceOwnerCidIndexKey) id() uint32            { return 5 }
func (x ResourceOwnerCidIndexKey) values() []interface{} { return x.vs }
func (x ResourceOwnerCidIndexKey) resourceIndexKey()     {}

func (this ResourceOwnerCidIndexKey) WithOwner(owner string) ResourceOwnerCidIndexKey {
	this.vs = []interface{}{owner}
	return this
}

func (this ResourceOwnerCidIndexKey) WithOwnerCid(owner string, cid string) ResourceOwnerCidIndexKey {
	this.vs = []interface{}{owner, cid}
	return this
}

type ResourceOwnerOriginCidIndexKey struct {
	vs []interface{}
}

func (x ResourceOwnerOriginCidIndexKey) id() uint32            { return 6 }
func (x ResourceOwnerOriginCidIndexKey) values() []interface{} { return x.vs }
func (x ResourceOwnerOriginCidIndexKey) resourceIndexKey()     {}

func (this ResourceOwnerOriginCidIndexKey) WithOwner(owner string) ResourceOwnerOriginCidIndexKey {
	this.vs = []interface{}{owner}
	return this
}

func (this ResourceOwnerOriginCidIndexKey) WithOwnerOrigin(owner string, origin string) ResourceOwnerOriginCidIndexKey {
	this.vs = []interface{}{owner, origin}
	return this
}

func (this ResourceOwnerOriginCidIndexKey) WithOwnerOriginCid(owner string, origin string, cid string) ResourceOwnerOriginCidIndexKey {
	this.vs = []interface{}{owner, origin, cid}
	return this
}

type resourceTable struct {
	table ormtable.Table
}

func (this resourceTable) Insert(ctx context.Context, resource *Resource) error {
	return this.table.Insert(ctx, resource)
}

func (this resourceTable) Update(ctx context.Context, resource *Resource) error {
	return this.table.Update(ctx, resource)
}

func (this resourceTable) Save(ctx context.Context, resource *Resource) error {
	return this.table.Save(ctx, resource)
}

func (this resourceTable) Delete(ctx context.Context, resource *Resource) error {
	return this.table.Delete(ctx, resource)
}

func (this resourceTable) Has(ctx context.Context, did string, cid string) (found bool, err error) {
	return this.table.PrimaryKey().Has(ctx, did, cid)
}

func (this resourceTable) Get(ctx context.Context, did string, cid string) (*Resource, error) {
	var resource Resource
	found, err := this.table.PrimaryKey().Get(ctx, &resource, did, cid)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &resource, nil
}

func (this resourceTable) HasByCid(ctx context.Context, cid string) (found bool, err error) {
	return this.table.GetIndexByID(1).(ormtable.UniqueIndex).Has(ctx,
		cid,
	)
}

func (this resourceTable) GetByCid(ctx context.Context, cid string) (*Resource, error) {
	var resource Resource
	found, err := this.table.GetIndexByID(1).(ormtable.UniqueIndex).Get(ctx, &resource,
		cid,
	)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &resource, nil
}

func (this resourceTable) HasByOriginCid(ctx context.Context, origin string, cid string) (found bool, err error) {
	return this.table.GetIndexByID(3).(ormtable.UniqueIndex).Has(ctx,
		origin,
		cid,
	)
}

func (this resourceTable) GetByOriginCid(ctx context.Context, origin string, cid string) (*Resource, error) {
	var resource Resource
	found, err := this.table.GetIndexByID(3).(ormtable.UniqueIndex).Get(ctx, &resource,
		origin,
		cid,
	)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &resource, nil
}

func (this resourceTable) HasByOwnerCid(ctx context.Context, owner string, cid string) (found bool, err error) {
	return this.table.GetIndexByID(5).(ormtable.UniqueIndex).Has(ctx,
		owner,
		cid,
	)
}

func (this resourceTable) GetByOwnerCid(ctx context.Context, owner string, cid string) (*Resource, error) {
	var resource Resource
	found, err := this.table.GetIndexByID(5).(ormtable.UniqueIndex).Get(ctx, &resource,
		owner,
		cid,
	)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &resource, nil
}

func (this resourceTable) HasByOwnerOriginCid(ctx context.Context, owner string, origin string, cid string) (found bool, err error) {
	return this.table.GetIndexByID(6).(ormtable.UniqueIndex).Has(ctx,
		owner,
		origin,
		cid,
	)
}

func (this resourceTable) GetByOwnerOriginCid(ctx context.Context, owner string, origin string, cid string) (*Resource, error) {
	var resource Resource
	found, err := this.table.GetIndexByID(6).(ormtable.UniqueIndex).Get(ctx, &resource,
		owner,
		origin,
		cid,
	)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &resource, nil
}

func (this resourceTable) List(ctx context.Context, prefixKey ResourceIndexKey, opts ...ormlist.Option) (ResourceIterator, error) {
	it, err := this.table.GetIndexByID(prefixKey.id()).List(ctx, prefixKey.values(), opts...)
	return ResourceIterator{it}, err
}

func (this resourceTable) ListRange(ctx context.Context, from, to ResourceIndexKey, opts ...ormlist.Option) (ResourceIterator, error) {
	it, err := this.table.GetIndexByID(from.id()).ListRange(ctx, from.values(), to.values(), opts...)
	return ResourceIterator{it}, err
}

func (this resourceTable) DeleteBy(ctx context.Context, prefixKey ResourceIndexKey) error {
	return this.table.GetIndexByID(prefixKey.id()).DeleteBy(ctx, prefixKey.values()...)
}

func (this resourceTable) DeleteRange(ctx context.Context, from, to ResourceIndexKey) error {
	return this.table.GetIndexByID(from.id()).DeleteRange(ctx, from.values(), to.values())
}

func (this resourceTable) doNotImplement() {}

var _ ResourceTable = resourceTable{}

func NewResourceTable(db ormtable.Schema) (ResourceTable, error) {
	table := db.GetTable(&Resource{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&Resource{}).ProtoReflect().Descriptor().FullName()))
	}
	return resourceTable{table}, nil
}

type PropertyTable interface {
	Insert(ctx context.Context, property *Property) error
	Update(ctx context.Context, property *Property) error
	Save(ctx context.Context, property *Property) error
	Delete(ctx context.Context, property *Property) error
	Has(ctx context.Context, did string) (found bool, err error)
	// Get returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	Get(ctx context.Context, did string) (*Property, error)
	HasByOriginOwnerKey(ctx context.Context, origin string, owner string, key string) (found bool, err error)
	// GetByOriginOwnerKey returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	GetByOriginOwnerKey(ctx context.Context, origin string, owner string, key string) (*Property, error)
	HasBySchemaKey(ctx context.Context, schema string, key string) (found bool, err error)
	// GetBySchemaKey returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	GetBySchemaKey(ctx context.Context, schema string, key string) (*Property, error)
	HasBySchemaOwnerKey(ctx context.Context, schema string, owner string, key string) (found bool, err error)
	// GetBySchemaOwnerKey returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	GetBySchemaOwnerKey(ctx context.Context, schema string, owner string, key string) (*Property, error)
	List(ctx context.Context, prefixKey PropertyIndexKey, opts ...ormlist.Option) (PropertyIterator, error)
	ListRange(ctx context.Context, from, to PropertyIndexKey, opts ...ormlist.Option) (PropertyIterator, error)
	DeleteBy(ctx context.Context, prefixKey PropertyIndexKey) error
	DeleteRange(ctx context.Context, from, to PropertyIndexKey) error

	doNotImplement()
}

type PropertyIterator struct {
	ormtable.Iterator
}

func (i PropertyIterator) Value() (*Property, error) {
	var property Property
	err := i.UnmarshalMessage(&property)
	return &property, err
}

type PropertyIndexKey interface {
	id() uint32
	values() []interface{}
	propertyIndexKey()
}

// primary key starting index..
type PropertyPrimaryKey = PropertyDidIndexKey

type PropertyDidIndexKey struct {
	vs []interface{}
}

func (x PropertyDidIndexKey) id() uint32            { return 0 }
func (x PropertyDidIndexKey) values() []interface{} { return x.vs }
func (x PropertyDidIndexKey) propertyIndexKey()     {}

func (this PropertyDidIndexKey) WithDid(did string) PropertyDidIndexKey {
	this.vs = []interface{}{did}
	return this
}

type PropertyOriginOwnerKeyIndexKey struct {
	vs []interface{}
}

func (x PropertyOriginOwnerKeyIndexKey) id() uint32            { return 1 }
func (x PropertyOriginOwnerKeyIndexKey) values() []interface{} { return x.vs }
func (x PropertyOriginOwnerKeyIndexKey) propertyIndexKey()     {}

func (this PropertyOriginOwnerKeyIndexKey) WithOrigin(origin string) PropertyOriginOwnerKeyIndexKey {
	this.vs = []interface{}{origin}
	return this
}

func (this PropertyOriginOwnerKeyIndexKey) WithOriginOwner(origin string, owner string) PropertyOriginOwnerKeyIndexKey {
	this.vs = []interface{}{origin, owner}
	return this
}

func (this PropertyOriginOwnerKeyIndexKey) WithOriginOwnerKey(origin string, owner string, key string) PropertyOriginOwnerKeyIndexKey {
	this.vs = []interface{}{origin, owner, key}
	return this
}

type PropertyOwnerKeyIndexKey struct {
	vs []interface{}
}

func (x PropertyOwnerKeyIndexKey) id() uint32            { return 2 }
func (x PropertyOwnerKeyIndexKey) values() []interface{} { return x.vs }
func (x PropertyOwnerKeyIndexKey) propertyIndexKey()     {}

func (this PropertyOwnerKeyIndexKey) WithOwner(owner string) PropertyOwnerKeyIndexKey {
	this.vs = []interface{}{owner}
	return this
}

func (this PropertyOwnerKeyIndexKey) WithOwnerKey(owner string, key string) PropertyOwnerKeyIndexKey {
	this.vs = []interface{}{owner, key}
	return this
}

type PropertyOriginKeyIndexKey struct {
	vs []interface{}
}

func (x PropertyOriginKeyIndexKey) id() uint32            { return 3 }
func (x PropertyOriginKeyIndexKey) values() []interface{} { return x.vs }
func (x PropertyOriginKeyIndexKey) propertyIndexKey()     {}

func (this PropertyOriginKeyIndexKey) WithOrigin(origin string) PropertyOriginKeyIndexKey {
	this.vs = []interface{}{origin}
	return this
}

func (this PropertyOriginKeyIndexKey) WithOriginKey(origin string, key string) PropertyOriginKeyIndexKey {
	this.vs = []interface{}{origin, key}
	return this
}

type PropertyOriginOwnerIndexKey struct {
	vs []interface{}
}

func (x PropertyOriginOwnerIndexKey) id() uint32            { return 4 }
func (x PropertyOriginOwnerIndexKey) values() []interface{} { return x.vs }
func (x PropertyOriginOwnerIndexKey) propertyIndexKey()     {}

func (this PropertyOriginOwnerIndexKey) WithOrigin(origin string) PropertyOriginOwnerIndexKey {
	this.vs = []interface{}{origin}
	return this
}

func (this PropertyOriginOwnerIndexKey) WithOriginOwner(origin string, owner string) PropertyOriginOwnerIndexKey {
	this.vs = []interface{}{origin, owner}
	return this
}

type PropertyOwnerIndexKey struct {
	vs []interface{}
}

func (x PropertyOwnerIndexKey) id() uint32            { return 5 }
func (x PropertyOwnerIndexKey) values() []interface{} { return x.vs }
func (x PropertyOwnerIndexKey) propertyIndexKey()     {}

func (this PropertyOwnerIndexKey) WithOwner(owner string) PropertyOwnerIndexKey {
	this.vs = []interface{}{owner}
	return this
}

type PropertySchemaKeyIndexKey struct {
	vs []interface{}
}

func (x PropertySchemaKeyIndexKey) id() uint32            { return 6 }
func (x PropertySchemaKeyIndexKey) values() []interface{} { return x.vs }
func (x PropertySchemaKeyIndexKey) propertyIndexKey()     {}

func (this PropertySchemaKeyIndexKey) WithSchema(schema string) PropertySchemaKeyIndexKey {
	this.vs = []interface{}{schema}
	return this
}

func (this PropertySchemaKeyIndexKey) WithSchemaKey(schema string, key string) PropertySchemaKeyIndexKey {
	this.vs = []interface{}{schema, key}
	return this
}

type PropertySchemaOwnerKeyIndexKey struct {
	vs []interface{}
}

func (x PropertySchemaOwnerKeyIndexKey) id() uint32            { return 7 }
func (x PropertySchemaOwnerKeyIndexKey) values() []interface{} { return x.vs }
func (x PropertySchemaOwnerKeyIndexKey) propertyIndexKey()     {}

func (this PropertySchemaOwnerKeyIndexKey) WithSchema(schema string) PropertySchemaOwnerKeyIndexKey {
	this.vs = []interface{}{schema}
	return this
}

func (this PropertySchemaOwnerKeyIndexKey) WithSchemaOwner(schema string, owner string) PropertySchemaOwnerKeyIndexKey {
	this.vs = []interface{}{schema, owner}
	return this
}

func (this PropertySchemaOwnerKeyIndexKey) WithSchemaOwnerKey(schema string, owner string, key string) PropertySchemaOwnerKeyIndexKey {
	this.vs = []interface{}{schema, owner, key}
	return this
}

type propertyTable struct {
	table ormtable.Table
}

func (this propertyTable) Insert(ctx context.Context, property *Property) error {
	return this.table.Insert(ctx, property)
}

func (this propertyTable) Update(ctx context.Context, property *Property) error {
	return this.table.Update(ctx, property)
}

func (this propertyTable) Save(ctx context.Context, property *Property) error {
	return this.table.Save(ctx, property)
}

func (this propertyTable) Delete(ctx context.Context, property *Property) error {
	return this.table.Delete(ctx, property)
}

func (this propertyTable) Has(ctx context.Context, did string) (found bool, err error) {
	return this.table.PrimaryKey().Has(ctx, did)
}

func (this propertyTable) Get(ctx context.Context, did string) (*Property, error) {
	var property Property
	found, err := this.table.PrimaryKey().Get(ctx, &property, did)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &property, nil
}

func (this propertyTable) HasByOriginOwnerKey(ctx context.Context, origin string, owner string, key string) (found bool, err error) {
	return this.table.GetIndexByID(1).(ormtable.UniqueIndex).Has(ctx,
		origin,
		owner,
		key,
	)
}

func (this propertyTable) GetByOriginOwnerKey(ctx context.Context, origin string, owner string, key string) (*Property, error) {
	var property Property
	found, err := this.table.GetIndexByID(1).(ormtable.UniqueIndex).Get(ctx, &property,
		origin,
		owner,
		key,
	)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &property, nil
}

func (this propertyTable) HasBySchemaKey(ctx context.Context, schema string, key string) (found bool, err error) {
	return this.table.GetIndexByID(6).(ormtable.UniqueIndex).Has(ctx,
		schema,
		key,
	)
}

func (this propertyTable) GetBySchemaKey(ctx context.Context, schema string, key string) (*Property, error) {
	var property Property
	found, err := this.table.GetIndexByID(6).(ormtable.UniqueIndex).Get(ctx, &property,
		schema,
		key,
	)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &property, nil
}

func (this propertyTable) HasBySchemaOwnerKey(ctx context.Context, schema string, owner string, key string) (found bool, err error) {
	return this.table.GetIndexByID(7).(ormtable.UniqueIndex).Has(ctx,
		schema,
		owner,
		key,
	)
}

func (this propertyTable) GetBySchemaOwnerKey(ctx context.Context, schema string, owner string, key string) (*Property, error) {
	var property Property
	found, err := this.table.GetIndexByID(7).(ormtable.UniqueIndex).Get(ctx, &property,
		schema,
		owner,
		key,
	)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &property, nil
}

func (this propertyTable) List(ctx context.Context, prefixKey PropertyIndexKey, opts ...ormlist.Option) (PropertyIterator, error) {
	it, err := this.table.GetIndexByID(prefixKey.id()).List(ctx, prefixKey.values(), opts...)
	return PropertyIterator{it}, err
}

func (this propertyTable) ListRange(ctx context.Context, from, to PropertyIndexKey, opts ...ormlist.Option) (PropertyIterator, error) {
	it, err := this.table.GetIndexByID(from.id()).ListRange(ctx, from.values(), to.values(), opts...)
	return PropertyIterator{it}, err
}

func (this propertyTable) DeleteBy(ctx context.Context, prefixKey PropertyIndexKey) error {
	return this.table.GetIndexByID(prefixKey.id()).DeleteBy(ctx, prefixKey.values()...)
}

func (this propertyTable) DeleteRange(ctx context.Context, from, to PropertyIndexKey) error {
	return this.table.GetIndexByID(from.id()).DeleteRange(ctx, from.values(), to.values())
}

func (this propertyTable) doNotImplement() {}

var _ PropertyTable = propertyTable{}

func NewPropertyTable(db ormtable.Schema) (PropertyTable, error) {
	table := db.GetTable(&Property{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&Property{}).ProtoReflect().Descriptor().FullName()))
	}
	return propertyTable{table}, nil
}

type StateStore interface {
	ServiceRecordTable() ServiceRecordTable
	UserProfileTable() UserProfileTable
	ResourceTable() ResourceTable
	PropertyTable() PropertyTable

	doNotImplement()
}

type stateStore struct {
	serviceRecord ServiceRecordTable
	userProfile   UserProfileTable
	resource      ResourceTable
	property      PropertyTable
}

func (x stateStore) ServiceRecordTable() ServiceRecordTable {
	return x.serviceRecord
}

func (x stateStore) UserProfileTable() UserProfileTable {
	return x.userProfile
}

func (x stateStore) ResourceTable() ResourceTable {
	return x.resource
}

func (x stateStore) PropertyTable() PropertyTable {
	return x.property
}

func (stateStore) doNotImplement() {}

var _ StateStore = stateStore{}

func NewStateStore(db ormtable.Schema) (StateStore, error) {
	serviceRecordTable, err := NewServiceRecordTable(db)
	if err != nil {
		return nil, err
	}

	userProfileTable, err := NewUserProfileTable(db)
	if err != nil {
		return nil, err
	}

	resourceTable, err := NewResourceTable(db)
	if err != nil {
		return nil, err
	}

	propertyTable, err := NewPropertyTable(db)
	if err != nil {
		return nil, err
	}

	return stateStore{
		serviceRecordTable,
		userProfileTable,
		resourceTable,
		propertyTable,
	}, nil
}
