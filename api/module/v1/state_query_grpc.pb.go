// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package modulev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StateQueryServiceClient is the client API for StateQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StateQueryServiceClient interface {
	// Get queries the ServiceRecord table by its primary key.
	GetServiceRecord(ctx context.Context, in *GetServiceRecordRequest, opts ...grpc.CallOption) (*GetServiceRecordResponse, error)
	// GetServiceRecordByOrigin queries the ServiceRecord table by its Origin index
	GetServiceRecordByOrigin(ctx context.Context, in *GetServiceRecordByOriginRequest, opts ...grpc.CallOption) (*GetServiceRecordByOriginResponse, error)
	// GetServiceRecordByNameOwner queries the ServiceRecord table by its NameOwner index
	GetServiceRecordByNameOwner(ctx context.Context, in *GetServiceRecordByNameOwnerRequest, opts ...grpc.CallOption) (*GetServiceRecordByNameOwnerResponse, error)
	// GetServiceRecordByOriginOwner queries the ServiceRecord table by its OriginOwner index
	GetServiceRecordByOriginOwner(ctx context.Context, in *GetServiceRecordByOriginOwnerRequest, opts ...grpc.CallOption) (*GetServiceRecordByOriginOwnerResponse, error)
	// ListServiceRecord queries the ServiceRecord table using prefix and range queries against defined indexes.
	ListServiceRecord(ctx context.Context, in *ListServiceRecordRequest, opts ...grpc.CallOption) (*ListServiceRecordResponse, error)
	// Get queries the UserProfile table by its primary key.
	GetUserProfile(ctx context.Context, in *GetUserProfileRequest, opts ...grpc.CallOption) (*GetUserProfileResponse, error)
	// GetUserProfileByOriginHandle queries the UserProfile table by its OriginHandle index
	GetUserProfileByOriginHandle(ctx context.Context, in *GetUserProfileByOriginHandleRequest, opts ...grpc.CallOption) (*GetUserProfileByOriginHandleResponse, error)
	// ListUserProfile queries the UserProfile table using prefix and range queries against defined indexes.
	ListUserProfile(ctx context.Context, in *ListUserProfileRequest, opts ...grpc.CallOption) (*ListUserProfileResponse, error)
	// Get queries the Resource table by its primary key.
	GetResource(ctx context.Context, in *GetResourceRequest, opts ...grpc.CallOption) (*GetResourceResponse, error)
	// GetResourceByCid queries the Resource table by its Cid index
	GetResourceByCid(ctx context.Context, in *GetResourceByCidRequest, opts ...grpc.CallOption) (*GetResourceByCidResponse, error)
	// GetResourceByOriginCid queries the Resource table by its OriginCid index
	GetResourceByOriginCid(ctx context.Context, in *GetResourceByOriginCidRequest, opts ...grpc.CallOption) (*GetResourceByOriginCidResponse, error)
	// GetResourceByOwnerCid queries the Resource table by its OwnerCid index
	GetResourceByOwnerCid(ctx context.Context, in *GetResourceByOwnerCidRequest, opts ...grpc.CallOption) (*GetResourceByOwnerCidResponse, error)
	// GetResourceByOwnerOriginCid queries the Resource table by its OwnerOriginCid index
	GetResourceByOwnerOriginCid(ctx context.Context, in *GetResourceByOwnerOriginCidRequest, opts ...grpc.CallOption) (*GetResourceByOwnerOriginCidResponse, error)
	// ListResource queries the Resource table using prefix and range queries against defined indexes.
	ListResource(ctx context.Context, in *ListResourceRequest, opts ...grpc.CallOption) (*ListResourceResponse, error)
	// Get queries the Property table by its primary key.
	GetProperty(ctx context.Context, in *GetPropertyRequest, opts ...grpc.CallOption) (*GetPropertyResponse, error)
	// GetPropertyByOriginOwnerKey queries the Property table by its OriginOwnerKey index
	GetPropertyByOriginOwnerKey(ctx context.Context, in *GetPropertyByOriginOwnerKeyRequest, opts ...grpc.CallOption) (*GetPropertyByOriginOwnerKeyResponse, error)
	// GetPropertyBySchemaKey queries the Property table by its SchemaKey index
	GetPropertyBySchemaKey(ctx context.Context, in *GetPropertyBySchemaKeyRequest, opts ...grpc.CallOption) (*GetPropertyBySchemaKeyResponse, error)
	// GetPropertyBySchemaOwnerKey queries the Property table by its SchemaOwnerKey index
	GetPropertyBySchemaOwnerKey(ctx context.Context, in *GetPropertyBySchemaOwnerKeyRequest, opts ...grpc.CallOption) (*GetPropertyBySchemaOwnerKeyResponse, error)
	// ListProperty queries the Property table using prefix and range queries against defined indexes.
	ListProperty(ctx context.Context, in *ListPropertyRequest, opts ...grpc.CallOption) (*ListPropertyResponse, error)
}

type stateQueryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStateQueryServiceClient(cc grpc.ClientConnInterface) StateQueryServiceClient {
	return &stateQueryServiceClient{cc}
}

func (c *stateQueryServiceClient) GetServiceRecord(ctx context.Context, in *GetServiceRecordRequest, opts ...grpc.CallOption) (*GetServiceRecordResponse, error) {
	out := new(GetServiceRecordResponse)
	err := c.cc.Invoke(ctx, "/sonrhq.service.module.v1.StateQueryService/GetServiceRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) GetServiceRecordByOrigin(ctx context.Context, in *GetServiceRecordByOriginRequest, opts ...grpc.CallOption) (*GetServiceRecordByOriginResponse, error) {
	out := new(GetServiceRecordByOriginResponse)
	err := c.cc.Invoke(ctx, "/sonrhq.service.module.v1.StateQueryService/GetServiceRecordByOrigin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) GetServiceRecordByNameOwner(ctx context.Context, in *GetServiceRecordByNameOwnerRequest, opts ...grpc.CallOption) (*GetServiceRecordByNameOwnerResponse, error) {
	out := new(GetServiceRecordByNameOwnerResponse)
	err := c.cc.Invoke(ctx, "/sonrhq.service.module.v1.StateQueryService/GetServiceRecordByNameOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) GetServiceRecordByOriginOwner(ctx context.Context, in *GetServiceRecordByOriginOwnerRequest, opts ...grpc.CallOption) (*GetServiceRecordByOriginOwnerResponse, error) {
	out := new(GetServiceRecordByOriginOwnerResponse)
	err := c.cc.Invoke(ctx, "/sonrhq.service.module.v1.StateQueryService/GetServiceRecordByOriginOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) ListServiceRecord(ctx context.Context, in *ListServiceRecordRequest, opts ...grpc.CallOption) (*ListServiceRecordResponse, error) {
	out := new(ListServiceRecordResponse)
	err := c.cc.Invoke(ctx, "/sonrhq.service.module.v1.StateQueryService/ListServiceRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) GetUserProfile(ctx context.Context, in *GetUserProfileRequest, opts ...grpc.CallOption) (*GetUserProfileResponse, error) {
	out := new(GetUserProfileResponse)
	err := c.cc.Invoke(ctx, "/sonrhq.service.module.v1.StateQueryService/GetUserProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) GetUserProfileByOriginHandle(ctx context.Context, in *GetUserProfileByOriginHandleRequest, opts ...grpc.CallOption) (*GetUserProfileByOriginHandleResponse, error) {
	out := new(GetUserProfileByOriginHandleResponse)
	err := c.cc.Invoke(ctx, "/sonrhq.service.module.v1.StateQueryService/GetUserProfileByOriginHandle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) ListUserProfile(ctx context.Context, in *ListUserProfileRequest, opts ...grpc.CallOption) (*ListUserProfileResponse, error) {
	out := new(ListUserProfileResponse)
	err := c.cc.Invoke(ctx, "/sonrhq.service.module.v1.StateQueryService/ListUserProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) GetResource(ctx context.Context, in *GetResourceRequest, opts ...grpc.CallOption) (*GetResourceResponse, error) {
	out := new(GetResourceResponse)
	err := c.cc.Invoke(ctx, "/sonrhq.service.module.v1.StateQueryService/GetResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) GetResourceByCid(ctx context.Context, in *GetResourceByCidRequest, opts ...grpc.CallOption) (*GetResourceByCidResponse, error) {
	out := new(GetResourceByCidResponse)
	err := c.cc.Invoke(ctx, "/sonrhq.service.module.v1.StateQueryService/GetResourceByCid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) GetResourceByOriginCid(ctx context.Context, in *GetResourceByOriginCidRequest, opts ...grpc.CallOption) (*GetResourceByOriginCidResponse, error) {
	out := new(GetResourceByOriginCidResponse)
	err := c.cc.Invoke(ctx, "/sonrhq.service.module.v1.StateQueryService/GetResourceByOriginCid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) GetResourceByOwnerCid(ctx context.Context, in *GetResourceByOwnerCidRequest, opts ...grpc.CallOption) (*GetResourceByOwnerCidResponse, error) {
	out := new(GetResourceByOwnerCidResponse)
	err := c.cc.Invoke(ctx, "/sonrhq.service.module.v1.StateQueryService/GetResourceByOwnerCid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) GetResourceByOwnerOriginCid(ctx context.Context, in *GetResourceByOwnerOriginCidRequest, opts ...grpc.CallOption) (*GetResourceByOwnerOriginCidResponse, error) {
	out := new(GetResourceByOwnerOriginCidResponse)
	err := c.cc.Invoke(ctx, "/sonrhq.service.module.v1.StateQueryService/GetResourceByOwnerOriginCid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) ListResource(ctx context.Context, in *ListResourceRequest, opts ...grpc.CallOption) (*ListResourceResponse, error) {
	out := new(ListResourceResponse)
	err := c.cc.Invoke(ctx, "/sonrhq.service.module.v1.StateQueryService/ListResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) GetProperty(ctx context.Context, in *GetPropertyRequest, opts ...grpc.CallOption) (*GetPropertyResponse, error) {
	out := new(GetPropertyResponse)
	err := c.cc.Invoke(ctx, "/sonrhq.service.module.v1.StateQueryService/GetProperty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) GetPropertyByOriginOwnerKey(ctx context.Context, in *GetPropertyByOriginOwnerKeyRequest, opts ...grpc.CallOption) (*GetPropertyByOriginOwnerKeyResponse, error) {
	out := new(GetPropertyByOriginOwnerKeyResponse)
	err := c.cc.Invoke(ctx, "/sonrhq.service.module.v1.StateQueryService/GetPropertyByOriginOwnerKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) GetPropertyBySchemaKey(ctx context.Context, in *GetPropertyBySchemaKeyRequest, opts ...grpc.CallOption) (*GetPropertyBySchemaKeyResponse, error) {
	out := new(GetPropertyBySchemaKeyResponse)
	err := c.cc.Invoke(ctx, "/sonrhq.service.module.v1.StateQueryService/GetPropertyBySchemaKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) GetPropertyBySchemaOwnerKey(ctx context.Context, in *GetPropertyBySchemaOwnerKeyRequest, opts ...grpc.CallOption) (*GetPropertyBySchemaOwnerKeyResponse, error) {
	out := new(GetPropertyBySchemaOwnerKeyResponse)
	err := c.cc.Invoke(ctx, "/sonrhq.service.module.v1.StateQueryService/GetPropertyBySchemaOwnerKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateQueryServiceClient) ListProperty(ctx context.Context, in *ListPropertyRequest, opts ...grpc.CallOption) (*ListPropertyResponse, error) {
	out := new(ListPropertyResponse)
	err := c.cc.Invoke(ctx, "/sonrhq.service.module.v1.StateQueryService/ListProperty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StateQueryServiceServer is the server API for StateQueryService service.
// All implementations must embed UnimplementedStateQueryServiceServer
// for forward compatibility
type StateQueryServiceServer interface {
	// Get queries the ServiceRecord table by its primary key.
	GetServiceRecord(context.Context, *GetServiceRecordRequest) (*GetServiceRecordResponse, error)
	// GetServiceRecordByOrigin queries the ServiceRecord table by its Origin index
	GetServiceRecordByOrigin(context.Context, *GetServiceRecordByOriginRequest) (*GetServiceRecordByOriginResponse, error)
	// GetServiceRecordByNameOwner queries the ServiceRecord table by its NameOwner index
	GetServiceRecordByNameOwner(context.Context, *GetServiceRecordByNameOwnerRequest) (*GetServiceRecordByNameOwnerResponse, error)
	// GetServiceRecordByOriginOwner queries the ServiceRecord table by its OriginOwner index
	GetServiceRecordByOriginOwner(context.Context, *GetServiceRecordByOriginOwnerRequest) (*GetServiceRecordByOriginOwnerResponse, error)
	// ListServiceRecord queries the ServiceRecord table using prefix and range queries against defined indexes.
	ListServiceRecord(context.Context, *ListServiceRecordRequest) (*ListServiceRecordResponse, error)
	// Get queries the UserProfile table by its primary key.
	GetUserProfile(context.Context, *GetUserProfileRequest) (*GetUserProfileResponse, error)
	// GetUserProfileByOriginHandle queries the UserProfile table by its OriginHandle index
	GetUserProfileByOriginHandle(context.Context, *GetUserProfileByOriginHandleRequest) (*GetUserProfileByOriginHandleResponse, error)
	// ListUserProfile queries the UserProfile table using prefix and range queries against defined indexes.
	ListUserProfile(context.Context, *ListUserProfileRequest) (*ListUserProfileResponse, error)
	// Get queries the Resource table by its primary key.
	GetResource(context.Context, *GetResourceRequest) (*GetResourceResponse, error)
	// GetResourceByCid queries the Resource table by its Cid index
	GetResourceByCid(context.Context, *GetResourceByCidRequest) (*GetResourceByCidResponse, error)
	// GetResourceByOriginCid queries the Resource table by its OriginCid index
	GetResourceByOriginCid(context.Context, *GetResourceByOriginCidRequest) (*GetResourceByOriginCidResponse, error)
	// GetResourceByOwnerCid queries the Resource table by its OwnerCid index
	GetResourceByOwnerCid(context.Context, *GetResourceByOwnerCidRequest) (*GetResourceByOwnerCidResponse, error)
	// GetResourceByOwnerOriginCid queries the Resource table by its OwnerOriginCid index
	GetResourceByOwnerOriginCid(context.Context, *GetResourceByOwnerOriginCidRequest) (*GetResourceByOwnerOriginCidResponse, error)
	// ListResource queries the Resource table using prefix and range queries against defined indexes.
	ListResource(context.Context, *ListResourceRequest) (*ListResourceResponse, error)
	// Get queries the Property table by its primary key.
	GetProperty(context.Context, *GetPropertyRequest) (*GetPropertyResponse, error)
	// GetPropertyByOriginOwnerKey queries the Property table by its OriginOwnerKey index
	GetPropertyByOriginOwnerKey(context.Context, *GetPropertyByOriginOwnerKeyRequest) (*GetPropertyByOriginOwnerKeyResponse, error)
	// GetPropertyBySchemaKey queries the Property table by its SchemaKey index
	GetPropertyBySchemaKey(context.Context, *GetPropertyBySchemaKeyRequest) (*GetPropertyBySchemaKeyResponse, error)
	// GetPropertyBySchemaOwnerKey queries the Property table by its SchemaOwnerKey index
	GetPropertyBySchemaOwnerKey(context.Context, *GetPropertyBySchemaOwnerKeyRequest) (*GetPropertyBySchemaOwnerKeyResponse, error)
	// ListProperty queries the Property table using prefix and range queries against defined indexes.
	ListProperty(context.Context, *ListPropertyRequest) (*ListPropertyResponse, error)
	mustEmbedUnimplementedStateQueryServiceServer()
}

// UnimplementedStateQueryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStateQueryServiceServer struct {
}

func (UnimplementedStateQueryServiceServer) GetServiceRecord(context.Context, *GetServiceRecordRequest) (*GetServiceRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceRecord not implemented")
}
func (UnimplementedStateQueryServiceServer) GetServiceRecordByOrigin(context.Context, *GetServiceRecordByOriginRequest) (*GetServiceRecordByOriginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceRecordByOrigin not implemented")
}
func (UnimplementedStateQueryServiceServer) GetServiceRecordByNameOwner(context.Context, *GetServiceRecordByNameOwnerRequest) (*GetServiceRecordByNameOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceRecordByNameOwner not implemented")
}
func (UnimplementedStateQueryServiceServer) GetServiceRecordByOriginOwner(context.Context, *GetServiceRecordByOriginOwnerRequest) (*GetServiceRecordByOriginOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceRecordByOriginOwner not implemented")
}
func (UnimplementedStateQueryServiceServer) ListServiceRecord(context.Context, *ListServiceRecordRequest) (*ListServiceRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServiceRecord not implemented")
}
func (UnimplementedStateQueryServiceServer) GetUserProfile(context.Context, *GetUserProfileRequest) (*GetUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserProfile not implemented")
}
func (UnimplementedStateQueryServiceServer) GetUserProfileByOriginHandle(context.Context, *GetUserProfileByOriginHandleRequest) (*GetUserProfileByOriginHandleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserProfileByOriginHandle not implemented")
}
func (UnimplementedStateQueryServiceServer) ListUserProfile(context.Context, *ListUserProfileRequest) (*ListUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserProfile not implemented")
}
func (UnimplementedStateQueryServiceServer) GetResource(context.Context, *GetResourceRequest) (*GetResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResource not implemented")
}
func (UnimplementedStateQueryServiceServer) GetResourceByCid(context.Context, *GetResourceByCidRequest) (*GetResourceByCidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceByCid not implemented")
}
func (UnimplementedStateQueryServiceServer) GetResourceByOriginCid(context.Context, *GetResourceByOriginCidRequest) (*GetResourceByOriginCidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceByOriginCid not implemented")
}
func (UnimplementedStateQueryServiceServer) GetResourceByOwnerCid(context.Context, *GetResourceByOwnerCidRequest) (*GetResourceByOwnerCidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceByOwnerCid not implemented")
}
func (UnimplementedStateQueryServiceServer) GetResourceByOwnerOriginCid(context.Context, *GetResourceByOwnerOriginCidRequest) (*GetResourceByOwnerOriginCidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceByOwnerOriginCid not implemented")
}
func (UnimplementedStateQueryServiceServer) ListResource(context.Context, *ListResourceRequest) (*ListResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListResource not implemented")
}
func (UnimplementedStateQueryServiceServer) GetProperty(context.Context, *GetPropertyRequest) (*GetPropertyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProperty not implemented")
}
func (UnimplementedStateQueryServiceServer) GetPropertyByOriginOwnerKey(context.Context, *GetPropertyByOriginOwnerKeyRequest) (*GetPropertyByOriginOwnerKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPropertyByOriginOwnerKey not implemented")
}
func (UnimplementedStateQueryServiceServer) GetPropertyBySchemaKey(context.Context, *GetPropertyBySchemaKeyRequest) (*GetPropertyBySchemaKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPropertyBySchemaKey not implemented")
}
func (UnimplementedStateQueryServiceServer) GetPropertyBySchemaOwnerKey(context.Context, *GetPropertyBySchemaOwnerKeyRequest) (*GetPropertyBySchemaOwnerKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPropertyBySchemaOwnerKey not implemented")
}
func (UnimplementedStateQueryServiceServer) ListProperty(context.Context, *ListPropertyRequest) (*ListPropertyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProperty not implemented")
}
func (UnimplementedStateQueryServiceServer) mustEmbedUnimplementedStateQueryServiceServer() {}

// UnsafeStateQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StateQueryServiceServer will
// result in compilation errors.
type UnsafeStateQueryServiceServer interface {
	mustEmbedUnimplementedStateQueryServiceServer()
}

func RegisterStateQueryServiceServer(s grpc.ServiceRegistrar, srv StateQueryServiceServer) {
	s.RegisterService(&StateQueryService_ServiceDesc, srv)
}

func _StateQueryService_GetServiceRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetServiceRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrhq.service.module.v1.StateQueryService/GetServiceRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetServiceRecord(ctx, req.(*GetServiceRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_GetServiceRecordByOrigin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceRecordByOriginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetServiceRecordByOrigin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrhq.service.module.v1.StateQueryService/GetServiceRecordByOrigin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetServiceRecordByOrigin(ctx, req.(*GetServiceRecordByOriginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_GetServiceRecordByNameOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceRecordByNameOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetServiceRecordByNameOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrhq.service.module.v1.StateQueryService/GetServiceRecordByNameOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetServiceRecordByNameOwner(ctx, req.(*GetServiceRecordByNameOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_GetServiceRecordByOriginOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceRecordByOriginOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetServiceRecordByOriginOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrhq.service.module.v1.StateQueryService/GetServiceRecordByOriginOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetServiceRecordByOriginOwner(ctx, req.(*GetServiceRecordByOriginOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_ListServiceRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServiceRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).ListServiceRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrhq.service.module.v1.StateQueryService/ListServiceRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).ListServiceRecord(ctx, req.(*ListServiceRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_GetUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrhq.service.module.v1.StateQueryService/GetUserProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetUserProfile(ctx, req.(*GetUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_GetUserProfileByOriginHandle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserProfileByOriginHandleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetUserProfileByOriginHandle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrhq.service.module.v1.StateQueryService/GetUserProfileByOriginHandle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetUserProfileByOriginHandle(ctx, req.(*GetUserProfileByOriginHandleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_ListUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).ListUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrhq.service.module.v1.StateQueryService/ListUserProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).ListUserProfile(ctx, req.(*ListUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_GetResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrhq.service.module.v1.StateQueryService/GetResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetResource(ctx, req.(*GetResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_GetResourceByCid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceByCidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetResourceByCid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrhq.service.module.v1.StateQueryService/GetResourceByCid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetResourceByCid(ctx, req.(*GetResourceByCidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_GetResourceByOriginCid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceByOriginCidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetResourceByOriginCid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrhq.service.module.v1.StateQueryService/GetResourceByOriginCid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetResourceByOriginCid(ctx, req.(*GetResourceByOriginCidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_GetResourceByOwnerCid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceByOwnerCidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetResourceByOwnerCid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrhq.service.module.v1.StateQueryService/GetResourceByOwnerCid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetResourceByOwnerCid(ctx, req.(*GetResourceByOwnerCidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_GetResourceByOwnerOriginCid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceByOwnerOriginCidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetResourceByOwnerOriginCid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrhq.service.module.v1.StateQueryService/GetResourceByOwnerOriginCid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetResourceByOwnerOriginCid(ctx, req.(*GetResourceByOwnerOriginCidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_ListResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).ListResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrhq.service.module.v1.StateQueryService/ListResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).ListResource(ctx, req.(*ListResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_GetProperty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPropertyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetProperty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrhq.service.module.v1.StateQueryService/GetProperty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetProperty(ctx, req.(*GetPropertyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_GetPropertyByOriginOwnerKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPropertyByOriginOwnerKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetPropertyByOriginOwnerKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrhq.service.module.v1.StateQueryService/GetPropertyByOriginOwnerKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetPropertyByOriginOwnerKey(ctx, req.(*GetPropertyByOriginOwnerKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_GetPropertyBySchemaKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPropertyBySchemaKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetPropertyBySchemaKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrhq.service.module.v1.StateQueryService/GetPropertyBySchemaKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetPropertyBySchemaKey(ctx, req.(*GetPropertyBySchemaKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_GetPropertyBySchemaOwnerKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPropertyBySchemaOwnerKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).GetPropertyBySchemaOwnerKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrhq.service.module.v1.StateQueryService/GetPropertyBySchemaOwnerKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).GetPropertyBySchemaOwnerKey(ctx, req.(*GetPropertyBySchemaOwnerKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateQueryService_ListProperty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPropertyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServiceServer).ListProperty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonrhq.service.module.v1.StateQueryService/ListProperty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServiceServer).ListProperty(ctx, req.(*ListPropertyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StateQueryService_ServiceDesc is the grpc.ServiceDesc for StateQueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StateQueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sonrhq.service.module.v1.StateQueryService",
	HandlerType: (*StateQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetServiceRecord",
			Handler:    _StateQueryService_GetServiceRecord_Handler,
		},
		{
			MethodName: "GetServiceRecordByOrigin",
			Handler:    _StateQueryService_GetServiceRecordByOrigin_Handler,
		},
		{
			MethodName: "GetServiceRecordByNameOwner",
			Handler:    _StateQueryService_GetServiceRecordByNameOwner_Handler,
		},
		{
			MethodName: "GetServiceRecordByOriginOwner",
			Handler:    _StateQueryService_GetServiceRecordByOriginOwner_Handler,
		},
		{
			MethodName: "ListServiceRecord",
			Handler:    _StateQueryService_ListServiceRecord_Handler,
		},
		{
			MethodName: "GetUserProfile",
			Handler:    _StateQueryService_GetUserProfile_Handler,
		},
		{
			MethodName: "GetUserProfileByOriginHandle",
			Handler:    _StateQueryService_GetUserProfileByOriginHandle_Handler,
		},
		{
			MethodName: "ListUserProfile",
			Handler:    _StateQueryService_ListUserProfile_Handler,
		},
		{
			MethodName: "GetResource",
			Handler:    _StateQueryService_GetResource_Handler,
		},
		{
			MethodName: "GetResourceByCid",
			Handler:    _StateQueryService_GetResourceByCid_Handler,
		},
		{
			MethodName: "GetResourceByOriginCid",
			Handler:    _StateQueryService_GetResourceByOriginCid_Handler,
		},
		{
			MethodName: "GetResourceByOwnerCid",
			Handler:    _StateQueryService_GetResourceByOwnerCid_Handler,
		},
		{
			MethodName: "GetResourceByOwnerOriginCid",
			Handler:    _StateQueryService_GetResourceByOwnerOriginCid_Handler,
		},
		{
			MethodName: "ListResource",
			Handler:    _StateQueryService_ListResource_Handler,
		},
		{
			MethodName: "GetProperty",
			Handler:    _StateQueryService_GetProperty_Handler,
		},
		{
			MethodName: "GetPropertyByOriginOwnerKey",
			Handler:    _StateQueryService_GetPropertyByOriginOwnerKey_Handler,
		},
		{
			MethodName: "GetPropertyBySchemaKey",
			Handler:    _StateQueryService_GetPropertyBySchemaKey_Handler,
		},
		{
			MethodName: "GetPropertyBySchemaOwnerKey",
			Handler:    _StateQueryService_GetPropertyBySchemaOwnerKey_Handler,
		},
		{
			MethodName: "ListProperty",
			Handler:    _StateQueryService_ListProperty_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sonrhq/service/module/v1/state_query.proto",
}
